input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

input ChangeOwnPasswordInput {
  currentPassword: String!
  newPassword: String!
}

type ChangeOwnPasswordResponse {
  message: String!
  success: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_PUBLIC_REGISTRATION_ROLE {
  CLIENT
}

enum ENUM_VIDEO_POSTPROCESSSTATUS {
  IN_PROCESS
  NEED_PROCESS
  PROCESS_DONE
  PROCESS_ERROR
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = HistoryDataParsing | HistoryRequest | I18NLocale | StudentTariffPeriod | Tariff | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Video

type HistoryDataParsing {
  createdAt: DateTime
  history_request: HistoryRequestEntityResponse
  parsingData: JSON
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type HistoryDataParsingEntity {
  attributes: HistoryDataParsing
  id: ID
}

type HistoryDataParsingEntityResponse {
  data: HistoryDataParsingEntity
}

type HistoryDataParsingEntityResponseCollection {
  data: [HistoryDataParsingEntity!]!
  meta: ResponseCollectionMeta!
}

input HistoryDataParsingFiltersInput {
  and: [HistoryDataParsingFiltersInput]
  createdAt: DateTimeFilterInput
  history_request: HistoryRequestFiltersInput
  id: IDFilterInput
  not: HistoryDataParsingFiltersInput
  or: [HistoryDataParsingFiltersInput]
  parsingData: JSONFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input HistoryDataParsingInput {
  history_request: ID
  parsingData: JSON
  user: ID
}

type HistoryRequest {
  createdAt: DateTime
  dataForParsing: JSON
  history_data_parsing: HistoryDataParsingEntityResponse
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type HistoryRequestEntity {
  attributes: HistoryRequest
  id: ID
}

type HistoryRequestEntityResponse {
  data: HistoryRequestEntity
}

type HistoryRequestEntityResponseCollection {
  data: [HistoryRequestEntity!]!
  meta: ResponseCollectionMeta!
}

input HistoryRequestFiltersInput {
  and: [HistoryRequestFiltersInput]
  createdAt: DateTimeFilterInput
  dataForParsing: JSONFilterInput
  history_data_parsing: HistoryDataParsingFiltersInput
  id: IDFilterInput
  not: HistoryRequestFiltersInput
  or: [HistoryRequestFiltersInput]
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input HistoryRequestInput {
  adsAuthor: String
  categoryForParsing: [String]
  countAds: Int
  dataForParsing: JSON
  finalPrice: Int
  firstPrice: Int
  history_data_parsing: ID
  keyWords: String
  rangeDate: [String]
  siteNameForParsing: String
  user: ID
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Mutation {
  changeOwnPassword(data: ChangeOwnPasswordInput!): ChangeOwnPasswordResponse

  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createHistoryDataParsing(data: HistoryDataParsingInput!): HistoryDataParsingEntityResponse
  createHistoryRequest(data: HistoryRequestInput!): HistoryRequestEntityResponse
  createStudentTariffPeriod(data: StudentTariffPeriodInput!): StudentTariffPeriodEntityResponse
  createTariff(data: TariffInput!): TariffEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createVideo(data: VideoInput!): VideoEntityResponse
  deleteHistoryDataParsing(id: ID!): HistoryDataParsingEntityResponse
  deleteHistoryRequest(id: ID!): HistoryRequestEntityResponse
  deleteStudentTariffPeriod(id: ID!): StudentTariffPeriodEntityResponse
  deleteTariff(id: ID!): TariffEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVideo(id: ID!): VideoEntityResponse

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  getParsingData(data: HistoryRequestInput): getParsingDataResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  registerParentOrChildren(data: RegisterParentOrChildrenInput!): RegisterParentOrChildrenResponse
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateHistoryDataParsing(data: HistoryDataParsingInput!, id: ID!): HistoryDataParsingEntityResponse
  updateHistoryRequest(data: HistoryRequestInput!, id: ID!): HistoryRequestEntityResponse
  updateStudentTariffPeriod(data: StudentTariffPeriodInput!, id: ID!): StudentTariffPeriodEntityResponse
  updateTariff(data: TariffInput!, id: ID!): TariffEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVideo(data: VideoInput!, id: ID!): VideoEntityResponse
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type MyProfileResponse {
  avatarUrl: String
  email: String!
  firstname: String
  id: ID!
  lastname: String
  patronymic: String
  role: MyProfileRole!
}

type MyProfileRole {
  id: ID!
  name: String!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Query {
  historyDataParsing(id: ID): HistoryDataParsingEntityResponse
  historyDataParsings(filters: HistoryDataParsingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HistoryDataParsingEntityResponseCollection
  historyRequest(id: ID): HistoryRequestEntityResponse
  historyRequests(filters: HistoryRequestFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HistoryRequestEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  myProfile: MyProfileResponse!
  sendFeedback(data: sendFeedbackInput): sendFeedbackResponse!
  studentTariffPeriod(id: ID): StudentTariffPeriodEntityResponse
  studentTariffPeriods(filters: StudentTariffPeriodFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StudentTariffPeriodEntityResponseCollection
  tariff(id: ID): TariffEntityResponse
  tariffs(filters: TariffFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TariffEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  video(id: ID): VideoEntityResponse
  videos(filters: VideoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): VideoEntityResponseCollection
}

input RegisterParentOrChildrenInput {
  email: String!
  firstname: String!
  lastname: String
  password: String!
  patronymic: String
  phone: String!
  role: ENUM_PUBLIC_REGISTRATION_ROLE!
  username: String!
}

type RegisterParentOrChildrenResponse {
  jwt: String
  user: UsersPermissionsUserEntity
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type StudentTariffPeriod {
  active: Boolean!
  createdAt: DateTime
  end: Date!
  start: Date!
  tariff: TariffEntityResponse
  updatedAt: DateTime
  users_permissions_user: UsersPermissionsUserEntityResponse
}

type StudentTariffPeriodEntity {
  attributes: StudentTariffPeriod
  id: ID
}

type StudentTariffPeriodEntityResponse {
  data: StudentTariffPeriodEntity
}

type StudentTariffPeriodEntityResponseCollection {
  data: [StudentTariffPeriodEntity!]!
  meta: ResponseCollectionMeta!
}

input StudentTariffPeriodFiltersInput {
  active: BooleanFilterInput
  and: [StudentTariffPeriodFiltersInput]
  createdAt: DateTimeFilterInput
  end: DateFilterInput
  id: IDFilterInput
  not: StudentTariffPeriodFiltersInput
  or: [StudentTariffPeriodFiltersInput]
  start: DateFilterInput
  tariff: TariffFiltersInput
  updatedAt: DateTimeFilterInput
  users_permissions_user: UsersPermissionsUserFiltersInput
}

input StudentTariffPeriodInput {
  active: Boolean
  end: Date
  start: Date
  tariff: ID
  users_permissions_user: ID
}

type StudentTariffPeriodRelationResponseCollection {
  data: [StudentTariffPeriodEntity!]!
}

type Tariff {
  createdAt: DateTime
  description: JSON!
  name: String!
  updatedAt: DateTime
}

type TariffEntity {
  attributes: Tariff
  id: ID
}

type TariffEntityResponse {
  data: TariffEntity
}

type TariffEntityResponseCollection {
  data: [TariffEntity!]!
  meta: ResponseCollectionMeta!
}

input TariffFiltersInput {
  and: [TariffFiltersInput]
  createdAt: DateTimeFilterInput
  description: JSONFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: TariffFiltersInput
  or: [TariffFiltersInput]
  updatedAt: DateTimeFilterInput
}

input TariffInput {
  description: JSON
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  avatarUrl: String
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  firstname: String!
  history_data: HistoryDataParsingEntityResponse
  history_request_for_user: HistoryRequestEntityResponse
  lastname: String
  patronymic: String
  provider: String
  role: UsersPermissionsRoleEntityResponse
  tariff_periods(filters: StudentTariffPeriodFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StudentTariffPeriodRelationResponseCollection
  telegram: String
  updatedAt: DateTime
  username: String!
  vk: String
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  avatarUrl: StringFilterInput
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  firstname: StringFilterInput
  history_data: HistoryDataParsingFiltersInput
  history_request_for_user: HistoryRequestFiltersInput
  id: IDFilterInput
  lastname: StringFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  patronymic: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  tariff_periods: StudentTariffPeriodFiltersInput
  telegram: StringFilterInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
  vk: StringFilterInput
}

input UsersPermissionsUserInput {
  avatarUrl: String
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  firstname: String
  history_data: ID
  history_request_for_user: ID
  lastname: String
  password: String
  patronymic: String
  provider: String
  resetPasswordToken: String
  role: ID
  tariff_periods: [ID]
  telegram: String
  username: String
  vk: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type Video {
  createdAt: DateTime
  filename: String!
  hls: String!
  originalVideoUri: String!
  postProcessStatus: ENUM_VIDEO_POSTPROCESSSTATUS!
  shortCode: String!
  thumb: String!
  updatedAt: DateTime
}

type VideoEntity {
  attributes: Video
  id: ID
}

type VideoEntityResponse {
  data: VideoEntity
}

type VideoEntityResponseCollection {
  data: [VideoEntity!]!
  meta: ResponseCollectionMeta!
}

input VideoFiltersInput {
  and: [VideoFiltersInput]
  createdAt: DateTimeFilterInput
  filename: StringFilterInput
  hls: StringFilterInput
  id: IDFilterInput
  not: VideoFiltersInput
  or: [VideoFiltersInput]
  originalVideoUri: StringFilterInput
  postProcessStatus: StringFilterInput
  shortCode: StringFilterInput
  thumb: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input VideoInput {
  filename: String
  hls: String
  originalVideoUri: String
  postProcessStatus: ENUM_VIDEO_POSTPROCESSSTATUS
  shortCode: String
  thumb: String
}

type getParsingDataResponse {
  json: JSON
}

input sendFeedbackInput {
  email: String!
  text: String!
  title: String
}

type sendFeedbackResponse {
  status: Boolean
}
